{"version":3,"sources":["images/Equipment.png","AppNavbar.js","Home.js","EquipmentList.js","EquipmentEdit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","toggle","bind","assertThisInitialized","setState","react_default","a","createElement","reactstrap_es","color","light","expand","tag","Link","to","onClick","navbar","className","href","Component","Home","AppNavbar_AppNavbar","src","homeImage","alt","fluid","EquipmentList","equipment","isLoading","remove","_this2","fetch","then","response","json","data","id","concat","method","headers","Accept","Content-Type","updatedEquipment","toConsumableArray","_this3","filter","i","_this4","_this$state","equipmentList","map","key","size","equipmentId","style","whiteSpace","equipmentName","equipmentAvailable","equipmentCost","equipmentDescription","equipmentOwner","equipmentOwnerPhone","equipmentOwnerEmail","width","EquipmentEdit","emptyItem","item","handleChange","handleSubmit","match","params","group","event","target","value","name","objectSpread","preventDefault","body","JSON","stringify","history","push","title","onSubmit","for","type","onChange","autoComplete","withRouter","App","BrowserRouter","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca48e3c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Equipment.e108aeb5.png\";","import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {isOpen: false};\n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render() {\n        return <Navbar color=\"faded\" light expand=\"md\">\n            <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n            <NavbarToggler onClick={this.toggle}/>\n            <Collapse isOpen={this.state.isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                    <NavItem>\n                        <NavLink href=\"https://github.com/stuvwxyz/equipment-ui\">GitHub</NavLink>\n                    </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>;\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport homeImage from './images/Equipment.png';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <AppNavbar/>\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={homeImage} className=\"App-logo\" alt=\"homeImage\" />\n                        <Container fluid>\n                            <Button color=\"link\"><Link to=\"/equipment\">Manage Equipment</Link></Button>\n                        </Container>\n                    </header>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\n\nclass EquipmentList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {equipment: [], isLoading: true};\n        this.remove = this.remove.bind(this);\n    }\n\n    componentDidMount() {\n        this.setState({isLoading: true});\n\n        fetch('/api/equipment')\n            .then(response => response.json())\n            .then(data => this.setState({equipment: data, isLoading: false}));\n    }\n\n    async remove(id) {\n        await fetch(`/api/equipment/${id}`, {\n            method: 'DELETE',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        }).then(() => {\n            let updatedEquipment = [...this.state.equipment].filter(i => i.id !== id);\n            this.setState({equipment: updatedEquipment});\n        });\n    }\n\n    render() {\n        const {equipment, isLoading} = this.state;\n\n        if (isLoading) {\n            return <p>Loading...</p>;\n        }\n\n        const equipmentList = equipment.map(equipment => {\n\n            return <tr key={equipment.id}>\n                <td>\n                    <ButtonGroup className=\"float-left\">\n                        <Button size=\"sm\" color=\"primary\" tag={Link} to={\"/equipmentedit/\" + equipment.equipmentId}>Update</Button>\n                    </ButtonGroup>\n                </td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentName}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentAvailable}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentCost}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentDescription}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentOwner}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentOwnerPhone}</td>\n                <td style={{whiteSpace: 'nowrap'}}>{equipment.equipmentOwnerEmail}</td>\n\n                <td>\n                    <ButtonGroup className=\"float-right\">\n                        <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(equipment.equipmentId)} >Remove</Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        });\n\n        return (\n            <div>\n                <AppNavbar/>\n                <Container fluid>\n                    <div className=\"float-right\">\n                        <Button color=\"success\" tag={Link} to=\"/equipmentedit/new\">Add Equipment</Button>\n                    </div>\n                    <h3>Equipment List</h3>\n                    <Table className=\"mt-4\">\n                        <thead>\n                        <tr>\n                            <th width=\"10%\">Update</th>\n                            <th width=\"10%\">Item</th>\n                            <th width=\"10%\">Available</th>\n                            <th width=\"15%\">Rental Cost</th>\n                            <th width=\"20%\">Description</th>\n                            <th width=\"15%\">Owner</th>\n                            <th width=\"10%\">Owner Phone</th>\n                            <th width=\"15%\">Owner Email</th>\n                            <th width=\"10%\">Remove</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {equipmentList}\n                        </tbody>\n                    </Table>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default EquipmentList;\n","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass EquipmentEdit extends Component {\n\n    emptyItem = {\n        equipmentName: '',\n        equipmentAvailable: '',\n        equipmentCost: '',\n        equipmentDescription: '',\n        equipmentOwner: '',\n        equipmentOwnerPhone: '',\n        equipmentOwnerEmail: ''\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            item: this.emptyItem\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    async componentDidMount() {\n        if (this.props.match.params.id !== 'new') {\n            const group = await (await fetch(`/api/equipment/${this.props.match.params.id}`)).json();\n            this.setState({item: group});\n        }\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        let item = {...this.state.item};\n        item[name] = value;\n        this.setState({item});\n    }\n\n    async handleSubmit(event) {\n        event.preventDefault();\n        const {item} = this.state;\n\n        await fetch('/api/equipment', {\n            method: (item.id) ? 'PUT' : 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(item),\n        });\n        this.props.history.push('/equipment');\n    }\n\n    render() {\n        const {item} = this.state;\n        const title = <h2>{item.id ? 'Edit Equipment' : 'Add Equipment'}</h2>;\n\n        return <div>\n            <AppNavbar/>\n            <Container>\n                {title}\n                <Form onSubmit={this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"equipmentName\">equipmentName</Label>\n                        <Input type=\"text\" name=\"equipmentName\" id=\"equipmentName\" value={item.equipmentName || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentName\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"equipmentAvailable\">equipmentAvailable</Label>\n                        <Input type=\"boolean\" name=\"equipmentAvailable\" id=\"equipmentAvailable\" value={item.equipmentAvailable || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentAvailable\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"equipmentCost\">equipmentCost</Label>\n                        <Input type=\"text\" name=\"equipmentCost\" id=\"equipmentCost\" value={item.equipmentCost || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentCost\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"equipmentDescription\">equipmentDescription</Label>\n                        <Input type=\"text\" name=\"equipmentDescription\" id=\"equipmentDescription\" value={item.equipmentDescription || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentDescription\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"equipmentOwner\">equipmentOwner</Label>\n                        <Input type=\"text\" name=\"equipmentOwner\" id=\"equipmentOwner\" value={item.equipmentOwner || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentOwner\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"equipmentOwnerPhone\">equipmentOwnerPhone</Label>\n                        <Input type=\"text\" name=\"equipmentOwnerPhone\" id=\"equipmentOwnerPhone\" value={item.equipmentOwnerPhone || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentOwnerPhone\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"equipmentOwnerEmail\">equipmentOwnerEmail</Label>\n                        <Input type=\"text\" name=\"equipmentOwnerEmail\" id=\"equipmentOwnerEmail\" value={item.equipmentOwnerEmail || ''}\n                               onChange={this.handleChange} autoComplete=\"equipmentOwnerEmail\"/>\n                    </FormGroup>\n\n                    <FormGroup>\n                        <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\n                        <Button color=\"secondary\" tag={Link} to=\"/equipment\">Cancel</Button>\n                    </FormGroup>\n                </Form>\n            </Container>\n        </div>\n    }\n}\n\nexport default withRouter(EquipmentEdit);\n","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport EquipmentList from './EquipmentList';\nimport EquipmentEdit from \"./EquipmentEdit\";\n\n\nclass App extends Component {\n  render() {\n    return (\n        <Router>\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n            <Route path='/equipment' exact={true} component={EquipmentList}/>\n            <Route path='/equipmentedit/:id' component={EquipmentEdit}/>\n          </Switch>\n        </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}